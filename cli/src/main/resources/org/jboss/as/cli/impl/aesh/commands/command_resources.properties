
# JBoss, Home of Professional Open Source.
# Copyright 2016, Red Hat, Inc., and individual contributors
# as indicated by the @author tags. See the copyright.txt file in the
# distribution for a full listing of individual contributors.
#
# This is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this software; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA, or see the FSF site: http://www.fsf.org.

# Command help content. Each command can define:
# <parent command> is not present for top level command.
# <parent command>.<command name>.description
# <parent command>.<command name>.synopsis
# <parent command>.<command name>.arguments.description
# <parent command>.<command name>.arguments.value (to be used in synopsis).
# <parent command>.<command name>.option.<option name>.description
# <parent command>.<command name>.option.<option name>.value (to be used in synopsis).
# Warning, providing a synopsis can lead to help being not in sync with actual implementation
attachment.description=\
Display or save the content of the attachments located in the operation response.

attachment.display.description=\
Display the content of the attachments located in the operation response.

attachment.display.option.operation.description=\
Mandatory, the operation that returns attachments.

attachment.display.option.operation.value=operation

attachment.save.description=\
Save the content of the attachments located in the operation response. If no \
--file option is provided, the attachment is saved in the CLI working \
directory, the attachment uuid being used as the file name. If multiple attachments \
are returned, the attachments are saved using the file name + an index. If \
--overwrite is present, then any existing file will be overwritten.

attachment.save.option.file.description=\
Optional, the path of file used to save the attachments.

attachment.save.option.file.value=file path

attachment.save.option.overwrite.description=\
optional, used when saving to a file. Will make the received file to overwrite \
existing file.

cd.description=\
Changes the current node path to the argument.\n\
The current node path is used as the address for operation requests that \
don't contain the address part. If an operation request does include the \
address, the included address is considered relative to the current node \
path. The current node path may end on a node-type. In that case, \
to execute an operation specifying a node-name would be sufficient \
(e.g. logging:read-resource).

cd.arguments.description=\
The new value for the current node path following the format:\n\
\   [node-type [=node-name (,node-type[=node-name])*]].\n\
The following navigation signs are supported in the node path:\n\
\    /      - the root node (e.g. 'cd /' or 'cd /some=thing');\n\
\    ..     - parent node (e.g. 'cd ..');\n\
\    t.type  - node type of the current node (e.g. 'cd .type').

cd.arguments.value=node path

cd.option.no-validation.description=\
Normally (when --no-validation is not present on the line), \
before switching to the node_path, the node_path is \
validated to make sure that it actually exists. \
In some cases, like batches, the validation may get \
in the way because the target address might not yet exist. \
If --no-validation is present the current context address \
will be set to the node_path without validating it.

clear.description=Clears the screen.

command.description=\
Allows to add new, remove and list existing generic type commands.\n\
A generic type command is a command that is assigned to a specific node type \
and which allows to perform any operation available for an instance of that \
type and/or modify any of the properties exposed by the type on any existing \
instance of that type.\n\
\n\
For example, suppose there is a generic type command assigned to type \
/subsystem=datasources/data-source and named data-source. Now, data-source \
command can be used to add new datasources to the server, modify properties \
and perform any available operation on any existing datasource. To do that, \
the command needs to identify the datasource that should be affected. For \
that, there is a special argument, which can be a property exposed by the type \
and that can be used to identify the instance, e.g. in case of datasource, \
this role can be given to property 'jndi-name'. Or if there is no such \
property, generic type command will automatically add argument 'name' which, \
as its value, will accept the instance name (the last name in the node path \
of the instance)\n\
\n\
Here is an example of invoking operation 'flush-all-connection-in-pool' on \
datasource with jndi-name 'myds'.\n\
\n\
data-source flush-all-connection-in-pool --jndi-name=myds\n\
\n\
where flush-all-connection-in-pool is an operation name exposed by data-source \
type and jndi-name is the property name that identifies the specific \
datasource to perform the operation on. If the operation has properties, they \
can be added as command line arguments by prefixing property names with '--' \
and supplying the values after '='. E.g. This is how a new datasource could be \
added \n\
\n\
data-source add --jndi-name=my-new-ds --driver-name=h2 \\ \n \
\               --connection-url=db:url --pool-name=my-ds-pool\n \
\n\
To modify properties of an existing type instance, just use property names as \
arguments like the operation arguments in the example above. E.g. \n\
\n\
data-source --jndi-name=my-new-ds --min-pool-size=11 --max-pool-size=22 \n \
\n\
Tab-completion will help completing operation and property names.\n\
\n\
Generic type commands support --help option. The content of the help will be \
generated from the description of the operations and properties provided by \
the model on the server. E.g. the following command will describe the type \
itself: \n\
\n\
data-source --help\n\
\n\
The following will list all the operations exposed by the type:\n\
\n\
data-source --help --commands \n\
\n\
This will list all the properties exposed by the type:\n\
\n\
data-source --help --properties \n\
\n\
And this will describe the specific operation, in this case \
flush-all-connection-in-pool:\n\
\n\
data-source flush-all-connection-in-pool --help

command.add.description=Adds a new generic type command.

command.add.option.node-type.description=\
Specifies the node path which ends on a type, for which the generic command \
should be created.

command.add.option.node-type.value=node path to type

command.add.option.property-id.description=\
(optional) a property name exposed by the type that should be used to identify \
instances of the type. If not specified, argument '--name' will be used with the \
instance name as its value to identify the target instance.

command.add.option.property-id.value=identifying property

command.add.option.command-name.description=\
The name for the command.

command.add.option.command-name.value=command name

command.list.description=Lists existing generic type commands.

command.remove.description=Removes an existing generic type command.

command.remove.arguments.description=\
The name of the command that should be removed.

command.remove.arguments.value=command name

command-timeout.description=\
get, set or reset the command timeout. By default there is no timeout.

command-timeout.get.description=\
Retrieves and print the currently set timeout. A timeout of 0 means no timeout.

command-timeout.reset.description=\
Reset the timeout to the default or CLI configuration value.

command-timeout.reset.arguments.description=\
Reset value, can be config or default.

command-timeout.reset.arguments.value=config|default

command-timeout.set.description=\
Set the timeout to a number of seconds.

command-timeout.set.arguments.description=\
The timeout in seconds.

command-timeout.set.arguments.value=num seconds

connect.description=\
Connects to the controller on the specified host and port using the specified \
protocol. The default values can be customized by specifying the desired defaults \
as command line arguments when launching the CLI. E.g.\n\
jboss-cli.sh --controller=http-remoting://controller-host.net:1234\n\
\n\
The host may be any of these formats:\n\
\  - a host name, e.g. localhost\n\
\  - an IPv4 address, e.g. 127.0.0.1\n\
\  - an IPv6 address, e.g. [::1]\n\
\n\
Controller addresses can be aliased and stored in the jboss-cli.xml config file.\
Aliases can later be used as arguments for the connect command.

connect.arguments.description=Optional, URL of the server to connect too. See synopsis \
for URL format.

connect.arguments.value=controller_alias|[http-remoting|https-remoting]://[host][:port]

connect.option.bind.description=Client bind address.

connect.option.bind.value=bind address

connection-info.description=\
Prints information about the current connection to the server. The information \
is username and date and hour since the user is logged in. If it is an SSL \
connection it also prints the server certificate as: subject, issuer, validity, \
SHA1 and MD5 fingerprint.


echo.description=\
Displays a line of text passed in as an argument resolving variables and \
expressions possibly contained in the text.

echo.arguments.description=\
Line of text, possibly containing variables and expressions.

echo.arguments.value=line of text

echo-dmr.description=\
Builds a DMR requests for the command or operation passed in as the argument \
and echos in its toString() format.

echo-dmr.arguments.description=\
Command or an operation to translate to DMR.

echo-dmr.arguments.value=command line

help.description=\
Print the commands and operations help content.\n\
Use completion to discover commands and operations. \
Here are some of the most basic supported commands:\n\
\n\
cn (or cd)    - change the current node path to the argument.\n\
connect       - connect to the server or domain controller.\n\
deployment    - deployment actions.\n\
history       - print or disable/enable/clear the history expansion.\n\
ls            - list the contents of the node path.\n\
pwn (or pwd)  - prints the current working node.\n\
quit (or q)   - quit the command line interface.\n\
version       - prints the version and environment information.\n\

help.arguments.description=The command or operation name.

help.arguments.value=<command or operation name>

help.option.commands.description=\
Display the list of commands available in the current context.

jdbc-driver-info.description=\
Displays the information about the installed (via modules or deployments) \
JDBC drivers. If the command is executed without the driver name as the argument, \
it will list all the installed JDBC drivers in a table with two columns:\n\
\n\
\  - NAME   - the name assigned to the JDBC driver.\n\
\n\
\  - SOURCE - can be either a deployment name or a module name with a slot\n\
\             in the following format: module_name/slot.\n\
\n\
If the driver name is specified, the command will display all the available \
information about the driver.

jdbc-driver-info.arguments.description=\
Optional, the name of an installed JDBC driver.

jdbc-driver-info.arguments.value=driver name

jdbc-driver-info.option.host.description=\
Can appear only and is required in the domain mode, specifies the target host \
for the command.

jdbc-driver-info.option.host.value=host name

jdbc-driver-info.option.server.description=\
Can appear only and is required in the domain mode, specifies the target server \
for the command.

jdbc-driver-info.option.server.value=server name

ls.description=\
Lists the contents of a node path. Which includes node types and attributes, \
if the node path ends on a node name, or node names if the node path ends on \
a node type.

ls.arguments.description=\
(optional) the node path the contents of which to print. \
If not specified, the contents of the current node path (indicated \
in the prompt) will be printed. The node path can end on either \
node type (in this case the contents will be the child node names) \
or the node name (in this case the contents will be the child node \
types and attributes). If the node path has no contents, nothing \
will be printed.\n\
\n\
If specified, the node-path is expected to follow format:\n\
[node-type [=node-name (,node-type[=node-name])*]].\n\
The following navigation signs are supported in the node-path:\n\
\ /      - the root node (e.g. 'cd /' or 'cd /some=thing')\n\
\ ..     - parent node (e.g. 'cd ..')\n\
\ .type  - node type of the current node (e.g. 'cd .type').

ls.arguments.value=node path

ls.option.headers.description=\
(optional) a list of operation headers separated by a semicolon. For the list of \
supported headers, please, refer to the domain management documentation or use \
tab-completion.

ls.option.headers.value={headers}

ls.option.l.description=\
(optional) by default the result consists of a list of names and \
is printed in columns using the whole width of the terminal. \
If the node path ends on a node name, the -l switch will print two \
tables:\n\
\ - one for attributes displaying the name, value and type of the\n\
\   attributes.\n\
\- one for child types displaying the type name, min and max\n\
\  allowed occurrences of instances of those types in the domain\n\
\  configuration.\n\
If the node path ends on a node type, the -l switch will print all \
the available child names one per line, i.e. in a column.

ls.option.resolve-expressions.description=\
Resolves the expressions in the returned attributes to their values on the server. \
In domain mode the argument is only available at /host=*/path=*, /host=*/interface=*, \
and host=*/server=* locations in the configuration.

ls.option.resolve-expressions.value=true|false

ls.option.<attribute-description-property>.description=\
(optional) by default, -l will display attribute name, value and type.\
Full attribute description (which you can see by executing 'read-attribute \
<attribute-name> --verbose') includes more properties. To include those into \
the 'ls -l' results, just list those properties as arguments to the ls command \
prefixing their names with '--'.\n\
E.g. 'ls -l --nillable --storage'.

pwd.description=\
Prints the full node path of the current working node.

quit.description=\
Terminates the command line session.

read.description=Read information of a resource.

read.attribute.description=\
Prints the value and, depending on the arguments, the description of the \
attribute of a managed resource.

read.attribute.option.node.description=\
(optional) the node path of the managed resource to which the target attribute \
belongs. If not present, the current node path (indicated in the prompt) is assumed.

read.attribute.option.node.value=node path

read.attribute.arguments.description=\
(required) the name of the target attribute.

read.attribute.arguments.value=attribute name

read.attribute.option.headers.description=\
(optional) a list of operation headers separated by a semicolon. For the list of \
supported headers, please, refer to the domain management documentation or use \
tab-completion.

read.attribute.option.headers.value={headers}

read.attribute.option.include-defaults.description=\
(optional) boolean to enable/disable default reading. In case it is set to false \
only the values set by user are returned. Attributes that were not explicitly \
initialized, will appear as not having any value.

read.attribute.option.resolve-expressions.description=\
Resolves the expressions in the returned attributes to their values on the server. \
In domain mode the argument is only available at /host=*/path=*, /host=*/interface=*, \
and host=*/server=* locations in the configuration.

read.attribute.option.verbose.description=\
(optional) Will print all the available meta information about the attribute in \
addition to the attribute value.

read.operation.description=\
If the operation name argument is not provided, lists all the operation names \
available in the current context and for the current node path. If the operation \
name is specified, prints the description of the operation, detailed description \
of its parameters and response.

read.operation.arguments.description=\
(optional) the name of the operation to describe. If not present, all the operations \
of the managed resource will be listed.

read.operation.arguments.value=operation name

read.operation.option.node.description=\
(optional) the node path of the managed resource to which the target attribute \
belongs. If not present, the current node path (indicated in the prompt) is assumed.

read.operation.option.node.value=node path

read.operation.option.headers.description=\
(optional) a list of operation headers separated by a semicolon. For the list of \
supported headers, please, refer to the domain management documentation or use \
tab-completion.

read.operation.option.headers.value={headers}

reload.description=\
Sends the :reload operation request to the server/domain controller and waits \
for the controller to close the connection and then it returns the control back \
to the client. It does not put the CLI client into the disconnected state. Instead, \
for the next entered command or operation it will try to automatically re-connect \
to the controller.\n\
\n\
If there was an i/o error while sending the request or receiving the response, \
the reload handler will disconnect from the controller.\n\
\n\
If the reload operation failed, i.e. the response received successfully indicated \
a failure, the handler will log the failure message and will not disconnect from \
the controller.\n\
\n\
NOTE: this command cannot be used in a batch because the handler is waiting for \
the controller to shutdown before returning the control back to the client which \
would not possible if the command was executed as a step in a composite operation. \
So, if there is a need to reload the controller from a batch, :reload operation \
must be used instead (and should be the last operation in the batch).

reload.option.admin-only.description=\
Whether the controller should start in running mode ADMIN_ONLY when it restarts. \
An ADMIN_ONLY controller will start any configured management interfaces and accept \
management requests, but will not start servers or, if this host controller is \
the master for the domain, accept incoming connections from slave host controllers. \
For embedded host controllers, this value is required and must be set to true. \
If not present, false value is assumed.

reload.option.admin-only.value = true|false

reload.option.host.description=\
Is allowed and required only in the domain mode, specifies the host name to reload.

reload.option.host.value = host name

reload.option.restart-servers.description=\
Optional, allowed only in the domain mode. If true the servers will be restarted, \
and if false the servers will be left running and reconnect to the Host Controller \
when started again. If not present, true value is assumed.

reload.option.restart-servers.value=true|false

reload.option.use-current-domain-config.description=\
Optional, allowed only in the domain mode. Only has an effect if \
--read-only-domain-config was specified when starting the controller. In that \
case, if this parameter is set to false the reloaded controller loads the \
original configuration version; if null or true the current runtime version of \
the model is used. If not present, true value is assumed.

reload.option.use-current-domain-config.value=true|false

reload.option.use-current-host-config.description=\
Optional, allowed only in the domain mode. Only has an effect if \
--read-only-host-config was specified when starting the controller. In that case, \
if this parameter is set to false the reloaded controller loads the original \
configuration version; if null or true the current runtime version of the model \
is used. If not present, true value is assumed.

reload.option.use-current-host-config.value=true|false

reload.option.use-current-server-config.description=\
Optional, allowed only in the standalone mode. Only has an effect if \
--read-only-server-config was specified when starting the server. In that case, \
if this parameter is set to false the reloaded server loads the original \
configuration version; if null or true the current runtime version of the model \
is used. If not present, true value is assumed.

reload.option.use-current-server-config.value=true|false

reload.option.domain-config.description=\
Optional, allowed only in the domain mode. Used to specify a new file name for \
the domain config. The same rules as for the --domain-config flag used on the \
command line when starting the host apply. When making changes to the model after the \
reload, the changes will still be persisted to the original domain configuration \
file that was used to first boot up the host controller.

reload.option.domain-config.value=file name

reload.option.host-config.description=\
Optional, allowed only in the domain mode. Used to specify a new file name for the \
host config. The same rules as for the --host-config flag used on the command line \
when starting the host apply. When making changes to the model after the reload, \
the changes will still be persisted to the original host configuration file that \
was used to first boot up the host controller.

reload.option.host-config.value=file name

reload.option.server-config.description=\
Optional, allowed only in the standalone mode. Used to specify a new file name \
for the host config. The same rules as for the --host-config flag used on the \
command line when starting the server apply. When making changes to the model \
after the reload, the changes will still be persisted to the original server \
configuration file that was used to first boot up the server.

reload.option.server-config.value=file name

set.description=\
Initializes variables with the given names with the specified values. If a \
variable already exists, its value will silently be overridden with the new value.\
If the value is not specified then the variable will be undefined.

set.arguments.description=\
One or more name=value pairs separated with space characters.

set.arguments.value=(name=value)+

shutdown.description=\
Sends the :shutdown operation request to the server/domain controller and waits \
for the controller to close the connection.\n\
\n\
If there was an i/o error while sending the request or receiving the response, \
the shutdown handler will disconnect from the controller.\n\
\n\
If the shutdown operation was executed successfully and the restart argument wasn't \
specified or was set to false, the handler will put the CLI client into the \
disconnected state.\n\
\n\
If the shutdown operation failed, i.e. the response received successfully indicated \
a failure, the handler will log the failure message and will not disconnect from \
the controller.\n\
\n\
NOTE: this command cannot be used in a batch because it the handler is waiting \
for the controller to shutdown before returning the control back to the client \
which would not possible if the command was executed as a step in a composite \
operation. So, if there is a need to shutdown the controller from a batch, \
:shutdown operation must be used instead (and should be the last operation in \
the batch).

shutdown.option.host.description=\
Is allowed and required only in the domain mode, specifies the host name to shutdown.

shutdown.option.host.value=host name

shutdown.option.restart.description=\
Optional, if true, once shutdown the controller will be restarted again; \
if not present, false is assumed.

shutdown.option.restart.value=true|false

shutdown.option.timeout.description=\
The shutdown timeout in seconds. If this is zero (the default) then the server \
will shutdown immediately. A value larger than zero means the server will wait \
up to this many seconds for all active requests to finish. A value smaller than \
zero means that the server will wait indefinitely for all active requests to finish.

shutdown.option.timeout.value=num seconds

unset.description=\
Removes an existing variable with the specified name. If the variable doesn't \
exist, the command will return silently.

unset.arguments.description=\
Name of the variable to remove.

unset.arguments.value=variable name

version.description=\
Print the CLI version information.

